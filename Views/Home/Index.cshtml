@model Assignment.Models.RegisterBindingModel

@{
    //Layout = null;
}
@section Scripts {
    @Scripts.Render("~/bundles/app")
}


@*@using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>RegisterBindingModel</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2", })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control", id = "firstName" } })
                    @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", id = "address" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" , id = "phone" } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", id = "status" } })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", id = "email" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }*@

<div class="col-sm-4">
    <form data-bind="submit: register">
        <h3>Register</h3>
        <div class="form-group">
            <label>Email</label>
            <input class="form-control" type="text" data-bind="value: registerEmail" />
        </div>
        <div class="form-group">
            <label>FullName</label>
            <input class="form-control" type="text" data-bind="value: registerFullName" />
        </div>
        <div class="form-group">
            <label>Address</label>
            <input class="form-control" type="text" data-bind="value: registerAddress" />
        </div>
        <div class="form-group">
            <label>Phone</label>
            <input class="form-control" type="text" data-bind="value: registerPhone" />
        </div>
        <div class="form-group">
            <label>Status</label>
            <input class="form-control" type="text" data-bind="value: registerStatus" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-default">Register</button>
        </div>
    </form>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@*<script>
        //var data = {
        //    FirstName: $('#firstName').val(),
        //    Address = $('#address').val(),
        //    PhoneNumber = $('#phone').val(),
        //    Status: = $('#status').val(),
        //    Email: = $('#email').val(),
        //};

        //$.ajax({
        //    type: 'POST',
        //    url: '/api/Account/Register',
        //    contentType: 'application/json; charset=utf-8',
        //    data: JSON.stringify(data)
        //}).done(function (data) {
        //    self.result("Done!");
        //}).fail(showError);
        function ViewModel() {
            var self = this;

            var tokenKey = 'accessToken';

            self.result = ko.observable();
            self.user = ko.observable();

            self.registerEmail = ko.observable();
            self.registerFullName = ko.observable();
            self.registerAddress = ko.observable();
            self.registerPhone = ko.observable();
            self.registerStatus = ko.observable();
           // self.registerPassword2 = ko.observable();

            self.loginEmail = ko.observable();
            self.loginPassword = ko.observable();
            self.errors = ko.observableArray([]);

            function showError(jqXHR) {

                self.result(jqXHR.status + ': ' + jqXHR.statusText);

                var response = jqXHR.responseJSON;
                if (response) {
                    if (response.Message) self.errors.push(response.Message);
                    if (response.ModelState) {
                        var modelState = response.ModelState;
                        for (var prop in modelState) {
                            if (modelState.hasOwnProperty(prop)) {
                                var msgArr = modelState[prop]; // expect array here
                                if (msgArr.length) {
                                    for (var i = 0; i < msgArr.length; ++i) self.errors.push(msgArr[i]);
                                }
                            }
                        }
                    }
                    if (response.error) self.errors.push(response.error);
                    if (response.error_description) self.errors.push(response.error_description);
                }
            }

            self.callApi = function () {
                self.result('');
                self.errors.removeAll();

                var token = sessionStorage.getItem(tokenKey);
                var headers = {};
                if (token) {
                    headers.Authorization = 'Bearer ' + token;
                }

                $.ajax({
                    type: 'GET',
                    url: '/api/values',
                    headers: headers
                }).done(function (data) {
                    self.result(data);
                }).fail(showError);
            }

            self.register = function () {
                self.result('');
                self.errors.removeAll();

                var data = {
                    Email: self.registerEmail(),
                    Password: self.registerPassword(),
                    ConfirmPassword: self.registerPassword2()
                };

                $.ajax({
                    type: 'POST',
                    url: '/api/Account/Register',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(data)
                }).done(function (data) {
                    self.result("Done!");
                }).fail(showError);
            }

            self.login = function () {
                self.result('');
                self.errors.removeAll();

                var loginData = {
                    grant_type: 'password',
                    username: self.loginEmail(),
                    password: self.loginPassword()
                };

                $.ajax({
                    type: 'POST',
                    url: '/Token',
                    data: loginData
                }).done(function (data) {
                    self.user(data.userName);
                    // Cache the access token in session storage.
                    sessionStorage.setItem(tokenKey, data.access_token);
                }).fail(showError);
            }

            self.logout = function () {
                // Log out from the cookie based logon.
                var token = sessionStorage.getItem(tokenKey);
                var headers = {};
                if (token) {
                    headers.Authorization = 'Bearer ' + token;
                }

                $.ajax({
                    type: 'POST',
                    url: '/api/Account/Logout',
                    headers: headers
                }).done(function (data) {
                    // Successfully logged out. Delete the token.
                    self.user('');
                    sessionStorage.removeItem(tokenKey);
                }).fail(showError);
            }
        }

        var app = new ViewModel();
        ko.applyBindings(app);
    </script>*@